//
// HandshakeResource.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains additional data that is needed to process a handshake. */

open class HandshakeResource: Codable {

    /** When needed, contains an additional array of &lt;code&gt;HandshakeResource&lt;/code&gt; objects. */
    public var resources: HandshakeResources?
    /** &lt;p&gt;The type of information being passed, specifying how the value is to be interpreted by the other party:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ACCOUNT&lt;/code&gt; - Specifies an AWS account ID number.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ORGANIZATION&lt;/code&gt; - Specifies an organization ID number.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EMAIL&lt;/code&gt; - Specifies the email address that is associated with the account that receives the handshake. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OWNER_EMAIL&lt;/code&gt; - Specifies the email address associated with the master account. Included as information about an organization. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OWNER_NAME&lt;/code&gt; - Specifies the name associated with the master account. Included as information about an organization. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NOTES&lt;/code&gt; - Additional text provided by the handshake initiator and intended for the recipient to read.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; */
    public var type: HandshakeResourceType?
    /** The information that is passed to the other party in the handshake. The format of the value string must match the requirements of the specified type. */
    public var value: HandshakeResourceValue?


    
    public init(resources: HandshakeResources?, type: HandshakeResourceType?, value: HandshakeResourceValue?) {
        self.resources = resources
        self.type = type
        self.value = value
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(resources, forKey: "Resources")
        try container.encodeIfPresent(type, forKey: "Type")
        try container.encodeIfPresent(value, forKey: "Value")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        resources = try container.decodeIfPresent(HandshakeResources.self, forKey: "Resources")
        type = try container.decodeIfPresent(HandshakeResourceType.self, forKey: "Type")
        value = try container.decodeIfPresent(HandshakeResourceValue.self, forKey: "Value")
    }
}

