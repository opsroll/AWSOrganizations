//
// Organization.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains details about an organization. An organization is a collection of accounts that are centrally managed together using consolidated billing, organized hierarchically with organizational units (OUs), and controlled with policies . */

open class Organization: Codable {

    /** &lt;p&gt;The Amazon Resource Name (ARN) of an organization.&lt;/p&gt; &lt;p&gt;For more information about ARNs in Organizations, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/organizations/latest/userguide/orgs_permissions.html#orgs-permissions-arns\&quot;&gt;ARN Formats Supported by Organizations&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt; */
    public var arn: OrganizationArn?
    /** &lt;p&gt;A list of policy types that are enabled for this organization. For example, if your organization has all features enabled, then service control policies (SCPs) are included in the list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Even if a policy type is shown as available in the organization, you can separately enable and disable them at the root level by using &lt;a&gt;EnablePolicyType&lt;/a&gt; and &lt;a&gt;DisablePolicyType&lt;/a&gt;. Use &lt;a&gt;ListRoots&lt;/a&gt; to see the status of a policy type in that root.&lt;/p&gt; &lt;/note&gt; */
    public var availablePolicyTypes: PolicyTypes?
    /** Specifies the functionality that currently is available to the organization. If set to \&quot;ALL\&quot;, then all features are enabled and policies can be applied to accounts in the organization. If set to \&quot;CONSOLIDATED_BILLING\&quot;, then only consolidated billing functionality is available. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/IAM/latest/UserGuide/orgs_manage_org_support-all-features.html\&quot;&gt;Enabling All Features in Your Organization&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;. */
    public var featureSet: OrganizationFeatureSet?
    /** &lt;p&gt;The unique identifier (ID) of an organization.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; for an organization ID string requires \&quot;o-\&quot; followed by from 10 to 32 lower-case letters or digits.&lt;/p&gt; */
    public var id: OrganizationId?
    /** &lt;p&gt;The Amazon Resource Name (ARN) of the account that is designated as the master account for the organization.&lt;/p&gt; &lt;p&gt;For more information about ARNs in Organizations, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/organizations/latest/userguide/orgs_permissions.html#orgs-permissions-arns\&quot;&gt;ARN Formats Supported by Organizations&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt; */
    public var masterAccountArn: AccountArn?
    /** The email address that is associated with the AWS account that is designated as the master account for the organization. */
    public var masterAccountEmail: Email?
    /** &lt;p&gt;The unique identifier (ID) of the master account of an organization.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; for an account ID string requires exactly 12 digits.&lt;/p&gt; */
    public var masterAccountId: AccountId?


    
    public init(arn: OrganizationArn?, availablePolicyTypes: PolicyTypes?, featureSet: OrganizationFeatureSet?, id: OrganizationId?, masterAccountArn: AccountArn?, masterAccountEmail: Email?, masterAccountId: AccountId?) {
        self.arn = arn
        self.availablePolicyTypes = availablePolicyTypes
        self.featureSet = featureSet
        self.id = id
        self.masterAccountArn = masterAccountArn
        self.masterAccountEmail = masterAccountEmail
        self.masterAccountId = masterAccountId
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(arn, forKey: "Arn")
        try container.encodeIfPresent(availablePolicyTypes, forKey: "AvailablePolicyTypes")
        try container.encodeIfPresent(featureSet, forKey: "FeatureSet")
        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(masterAccountArn, forKey: "MasterAccountArn")
        try container.encodeIfPresent(masterAccountEmail, forKey: "MasterAccountEmail")
        try container.encodeIfPresent(masterAccountId, forKey: "MasterAccountId")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        arn = try container.decodeIfPresent(OrganizationArn.self, forKey: "Arn")
        availablePolicyTypes = try container.decodeIfPresent(PolicyTypes.self, forKey: "AvailablePolicyTypes")
        featureSet = try container.decodeIfPresent(OrganizationFeatureSet.self, forKey: "FeatureSet")
        id = try container.decodeIfPresent(OrganizationId.self, forKey: "Id")
        masterAccountArn = try container.decodeIfPresent(AccountArn.self, forKey: "MasterAccountArn")
        masterAccountEmail = try container.decodeIfPresent(Email.self, forKey: "MasterAccountEmail")
        masterAccountId = try container.decodeIfPresent(AccountId.self, forKey: "MasterAccountId")
    }
}

