//
// CreatePolicyRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CreatePolicyRequest: Codable {

    /** The policy content to add to the new policy. For example, if you create a &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html\&quot;&gt;service control policy&lt;/a&gt; (SCP), this string must be JSON text that specifies the permissions that admins in attached accounts can delegate to their users, groups, and roles. For more information about the SCP syntax, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html\&quot;&gt;Service Control Policy Syntax&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;. */
    public var content: PolicyContent
    /** An optional description to assign to the policy. */
    public var description: PolicyDescription
    /** &lt;p&gt;The friendly name to assign to the policy.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; that is used to validate this parameter is a string of any of the characters in the ASCII character range.&lt;/p&gt; */
    public var name: PolicyName
    /** &lt;p&gt;The type of policy to create.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the current release, the only type of policy that you can create is a service control policy (SCP).&lt;/p&gt; &lt;/note&gt; */
    public var type: PolicyType


    
    public init(content: PolicyContent, description: PolicyDescription, name: PolicyName, type: PolicyType) {
        self.content = content
        self.description = description
        self.name = name
        self.type = type
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(content, forKey: "Content")
        try container.encode(description, forKey: "Description")
        try container.encode(name, forKey: "Name")
        try container.encode(type, forKey: "Type")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        content = try container.decode(PolicyContent.self, forKey: "Content")
        description = try container.decode(PolicyDescription.self, forKey: "Description")
        name = try container.decode(PolicyName.self, forKey: "Name")
        type = try container.decode(PolicyType.self, forKey: "Type")
    }
}

