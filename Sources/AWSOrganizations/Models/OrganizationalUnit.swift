//
// OrganizationalUnit.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains details about an organizational unit (OU). An OU is a container of AWS accounts within a root of an organization. Policies that are attached to an OU apply to all accounts contained in that OU and in any child OUs. */

open class OrganizationalUnit: Codable {

    /** &lt;p&gt;The Amazon Resource Name (ARN) of this OU.&lt;/p&gt; &lt;p&gt;For more information about ARNs in Organizations, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/organizations/latest/userguide/orgs_permissions.html#orgs-permissions-arns\&quot;&gt;ARN Formats Supported by Organizations&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt; */
    public var arn: OrganizationalUnitArn?
    /** &lt;p&gt;The unique identifier (ID) associated with this OU.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; for an organizational unit ID string requires \&quot;ou-\&quot; followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second \&quot;-\&quot; dash and from 8 to 32 additional lower-case letters or digits.&lt;/p&gt; */
    public var id: OrganizationalUnitId?
    /** &lt;p&gt;The friendly name of this OU.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; that is used to validate this parameter is a string of any of the characters in the ASCII character range.&lt;/p&gt; */
    public var name: OrganizationalUnitName?


    
    public init(arn: OrganizationalUnitArn?, id: OrganizationalUnitId?, name: OrganizationalUnitName?) {
        self.arn = arn
        self.id = id
        self.name = name
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(arn, forKey: "Arn")
        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(name, forKey: "Name")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        arn = try container.decodeIfPresent(OrganizationalUnitArn.self, forKey: "Arn")
        id = try container.decodeIfPresent(OrganizationalUnitId.self, forKey: "Id")
        name = try container.decodeIfPresent(OrganizationalUnitName.self, forKey: "Name")
    }
}

