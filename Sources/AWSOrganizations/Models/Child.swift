//
// Child.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains a list of child entities, either OUs or accounts. */

open class Child: Codable {

    /** &lt;p&gt;The unique identifier (ID) of this child entity.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; for a child ID string requires one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Account: a string that consists of exactly 12 digits.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organizational unit (OU): a string that begins with \&quot;ou-\&quot; followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second \&quot;-\&quot; dash and from 8 to 32 additional lower-case letters or digits.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; */
    public var id: ChildId?
    /** The type of this child entity. */
    public var type: ChildType?


    
    public init(id: ChildId?, type: ChildType?) {
        self.id = id
        self.type = type
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(type, forKey: "Type")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(ChildId.self, forKey: "Id")
        type = try container.decodeIfPresent(ChildType.self, forKey: "Type")
    }
}

