//
// UpdatePolicyRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class UpdatePolicyRequest: Codable {

    /** If provided, the new content for the policy. The text must be correctly formatted JSON that complies with the syntax for the policy&#39;s type. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html\&quot;&gt;Service Control Policy Syntax&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;. */
    public var content: PolicyContent?
    /** If provided, the new description for the policy. */
    public var description: PolicyDescription?
    /** &lt;p&gt;If provided, the new name for the policy.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; that is used to validate this parameter is a string of any of the characters in the ASCII character range.&lt;/p&gt; */
    public var name: PolicyName?
    /** &lt;p&gt;The unique identifier (ID) of the policy that you want to update.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; for a policy ID string requires \&quot;p-\&quot; followed by from 8 to 128 lower-case letters or digits.&lt;/p&gt; */
    public var policyId: PolicyId


    
    public init(content: PolicyContent?, description: PolicyDescription?, name: PolicyName?, policyId: PolicyId) {
        self.content = content
        self.description = description
        self.name = name
        self.policyId = policyId
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(content, forKey: "Content")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encode(policyId, forKey: "PolicyId")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        content = try container.decodeIfPresent(PolicyContent.self, forKey: "Content")
        description = try container.decodeIfPresent(PolicyDescription.self, forKey: "Description")
        name = try container.decodeIfPresent(PolicyName.self, forKey: "Name")
        policyId = try container.decode(PolicyId.self, forKey: "PolicyId")
    }
}

