//
// Account.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains information about an AWS account that is a member of an organization. */

open class Account: Codable {

    /** &lt;p&gt;The Amazon Resource Name (ARN) of the account.&lt;/p&gt; &lt;p&gt;For more information about ARNs in Organizations, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/organizations/latest/userguide/orgs_permissions.html#orgs-permissions-arns\&quot;&gt;ARN Formats Supported by Organizations&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt; */
    public var arn: AccountArn?
    /** &lt;p&gt;The email address associated with the AWS account.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; for this parameter is a string of characters that represents a standard Internet email address.&lt;/p&gt; */
    public var email: Email?
    /** &lt;p&gt;The unique identifier (ID) of the account.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; for an account ID string requires exactly 12 digits.&lt;/p&gt; */
    public var id: AccountId?
    /** The method by which the account joined the organization. */
    public var joinedMethod: AccountJoinedMethod?
    /** The date the account became a part of the organization. */
    public var joinedTimestamp: Timestamp?
    /** &lt;p&gt;The friendly name of the account.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; that is used to validate this parameter is a string of any of the characters in the ASCII character range.&lt;/p&gt; */
    public var name: AccountName?
    /** The status of the account in the organization. */
    public var status: AccountStatus?


    
    public init(arn: AccountArn?, email: Email?, id: AccountId?, joinedMethod: AccountJoinedMethod?, joinedTimestamp: Timestamp?, name: AccountName?, status: AccountStatus?) {
        self.arn = arn
        self.email = email
        self.id = id
        self.joinedMethod = joinedMethod
        self.joinedTimestamp = joinedTimestamp
        self.name = name
        self.status = status
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(arn, forKey: "Arn")
        try container.encodeIfPresent(email, forKey: "Email")
        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(joinedMethod, forKey: "JoinedMethod")
        try container.encodeIfPresent(joinedTimestamp, forKey: "JoinedTimestamp")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(status, forKey: "Status")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        arn = try container.decodeIfPresent(AccountArn.self, forKey: "Arn")
        email = try container.decodeIfPresent(Email.self, forKey: "Email")
        id = try container.decodeIfPresent(AccountId.self, forKey: "Id")
        joinedMethod = try container.decodeIfPresent(AccountJoinedMethod.self, forKey: "JoinedMethod")
        joinedTimestamp = try container.decodeIfPresent(Timestamp.self, forKey: "JoinedTimestamp")
        name = try container.decodeIfPresent(AccountName.self, forKey: "Name")
        status = try container.decodeIfPresent(AccountStatus.self, forKey: "Status")
    }
}

