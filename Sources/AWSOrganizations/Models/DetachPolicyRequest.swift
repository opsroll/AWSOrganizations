//
// DetachPolicyRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class DetachPolicyRequest: Codable {

    /** &lt;p&gt;The unique identifier (ID) of the policy you want to detach. You can get the ID from the &lt;a&gt;ListPolicies&lt;/a&gt; or &lt;a&gt;ListPoliciesForTarget&lt;/a&gt; operations.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; for a policy ID string requires \&quot;p-\&quot; followed by from 8 to 128 lower-case letters or digits.&lt;/p&gt; */
    public var policyId: PolicyId
    /** &lt;p&gt;The unique identifier (ID) of the root, OU, or account from which you want to detach the policy. You can get the ID from the &lt;a&gt;ListRoots&lt;/a&gt;, &lt;a&gt;ListOrganizationalUnitsForParent&lt;/a&gt;, or &lt;a&gt;ListAccounts&lt;/a&gt; operations.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; for a target ID string requires one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Root: a string that begins with \&quot;r-\&quot; followed by from 4 to 32 lower-case letters or digits.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Account: a string that consists of exactly 12 digits.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organizational unit (OU): a string that begins with \&quot;ou-\&quot; followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second \&quot;-\&quot; dash and from 8 to 32 additional lower-case letters or digits.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; */
    public var targetId: PolicyTargetId


    
    public init(policyId: PolicyId, targetId: PolicyTargetId) {
        self.policyId = policyId
        self.targetId = targetId
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(policyId, forKey: "PolicyId")
        try container.encode(targetId, forKey: "TargetId")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        policyId = try container.decode(PolicyId.self, forKey: "PolicyId")
        targetId = try container.decode(PolicyTargetId.self, forKey: "TargetId")
    }
}

