//
// CreateAccountStatus.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains the status about a &lt;a&gt;CreateAccount&lt;/a&gt; request to create an AWS account in an organization. */

open class CreateAccountStatus: Codable {

    /** &lt;p&gt;If the account was created successfully, the unique identifier (ID) of the new account.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; for an account ID string requires exactly 12 digits.&lt;/p&gt; */
    public var accountId: AccountId?
    /** The account name given to the account when it was created. */
    public var accountName: AccountName?
    /** The date and time that the account was created and the request completed. */
    public var completedTimestamp: Timestamp?
    /** &lt;p&gt;If the request failed, a description of the reason for the failure.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;ACCOUNT_LIMIT_EXCEEDED: The account could not be created because you have reached the limit on the number of accounts in your organization.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;EMAIL_ALREADY_EXISTS: The account could not be created because another AWS account with that email address already exists.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;INVALID_ADDRESS: The account could not be created because the address you provided is not valid.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;INVALID_EMAIL: The account could not be created because the email address you provided is not valid.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;INTERNAL_FAILURE: The account could not be created because of an internal failure. Try again later. If the problem persists, contact Customer Support.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; */
    public var failureReason: CreateAccountFailureReason?
    /** &lt;p&gt;The unique identifier (ID) that references this request. You get this value from the response of the initial &lt;a&gt;CreateAccount&lt;/a&gt; request to create the account.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; for an create account request ID string requires \&quot;car-\&quot; followed by from 8 to 32 lower-case letters or digits.&lt;/p&gt; */
    public var id: CreateAccountRequestId?
    /** The date and time that the request was made for the account creation. */
    public var requestedTimestamp: Timestamp?
    /** The status of the request. */
    public var state: CreateAccountState?


    
    public init(accountId: AccountId?, accountName: AccountName?, completedTimestamp: Timestamp?, failureReason: CreateAccountFailureReason?, id: CreateAccountRequestId?, requestedTimestamp: Timestamp?, state: CreateAccountState?) {
        self.accountId = accountId
        self.accountName = accountName
        self.completedTimestamp = completedTimestamp
        self.failureReason = failureReason
        self.id = id
        self.requestedTimestamp = requestedTimestamp
        self.state = state
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(accountId, forKey: "AccountId")
        try container.encodeIfPresent(accountName, forKey: "AccountName")
        try container.encodeIfPresent(completedTimestamp, forKey: "CompletedTimestamp")
        try container.encodeIfPresent(failureReason, forKey: "FailureReason")
        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(requestedTimestamp, forKey: "RequestedTimestamp")
        try container.encodeIfPresent(state, forKey: "State")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        accountId = try container.decodeIfPresent(AccountId.self, forKey: "AccountId")
        accountName = try container.decodeIfPresent(AccountName.self, forKey: "AccountName")
        completedTimestamp = try container.decodeIfPresent(Timestamp.self, forKey: "CompletedTimestamp")
        failureReason = try container.decodeIfPresent(CreateAccountFailureReason.self, forKey: "FailureReason")
        id = try container.decodeIfPresent(CreateAccountRequestId.self, forKey: "Id")
        requestedTimestamp = try container.decodeIfPresent(Timestamp.self, forKey: "RequestedTimestamp")
        state = try container.decodeIfPresent(CreateAccountState.self, forKey: "State")
    }
}

