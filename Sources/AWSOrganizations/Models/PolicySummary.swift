//
// PolicySummary.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Contains information about a policy, but does not include the content. To see the content of a policy, see &lt;a&gt;DescribePolicy&lt;/a&gt;. */

open class PolicySummary: Codable {

    /** &lt;p&gt;The Amazon Resource Name (ARN) of the policy.&lt;/p&gt; &lt;p&gt;For more information about ARNs in Organizations, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/organizations/latest/userguide/orgs_permissions.html#orgs-permissions-arns\&quot;&gt;ARN Formats Supported by Organizations&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt; */
    public var arn: PolicyArn?
    /** A boolean value that indicates whether the specified policy is an AWS managed policy. If true, then you can attach the policy to roots, OUs, or accounts, but you cannot edit it. */
    public var awsManaged: AwsManagedPolicy?
    /** The description of the policy. */
    public var description: PolicyDescription?
    /** &lt;p&gt;The unique identifier (ID) of the policy.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; for a policy ID string requires \&quot;p-\&quot; followed by from 8 to 128 lower-case letters or digits.&lt;/p&gt; */
    public var id: PolicyId?
    /** &lt;p&gt;The friendly name of the policy.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; that is used to validate this parameter is a string of any of the characters in the ASCII character range.&lt;/p&gt; */
    public var name: PolicyName?
    /** The type of policy. */
    public var type: PolicyType?


    
    public init(arn: PolicyArn?, awsManaged: AwsManagedPolicy?, description: PolicyDescription?, id: PolicyId?, name: PolicyName?, type: PolicyType?) {
        self.arn = arn
        self.awsManaged = awsManaged
        self.description = description
        self.id = id
        self.name = name
        self.type = type
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(arn, forKey: "Arn")
        try container.encodeIfPresent(awsManaged, forKey: "AwsManaged")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(type, forKey: "Type")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        arn = try container.decodeIfPresent(PolicyArn.self, forKey: "Arn")
        awsManaged = try container.decodeIfPresent(AwsManagedPolicy.self, forKey: "AwsManaged")
        description = try container.decodeIfPresent(PolicyDescription.self, forKey: "Description")
        id = try container.decodeIfPresent(PolicyId.self, forKey: "Id")
        name = try container.decodeIfPresent(PolicyName.self, forKey: "Name")
        type = try container.decodeIfPresent(PolicyType.self, forKey: "Type")
    }
}

